CCS PCM C Compiler, Version 5.048, 25478               22-10-15 17:57

               Filename:   C:\Users\denshi\Documents\2015_Tracer_Program\3071_tanaka\source.lst

               ROM used:   262 words (26%)
                           Largest free fragment is 762
               RAM used:   35 (51%) at main() level
                           36 (53%) worst case
               Stack used: 3 locations (1 in main + 2 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   064
0003:  NOP
0004:  BTFSC  03.5
0005:  GOTO   00A
0006:  MOVWF  10
0007:  SWAPF  03,W
0008:  MOVWF  11
0009:  GOTO   00F
000A:  BCF    03.5
000B:  MOVWF  10
000C:  SWAPF  03,W
000D:  MOVWF  11
000E:  BSF    11.1
000F:  MOVF   0A,W
0010:  MOVWF  17
0011:  CLRF   0A
0012:  BCF    03.7
0013:  SWAPF  10,F
0014:  MOVF   04,W
0015:  MOVWF  12
0016:  MOVF   0C,W
0017:  MOVWF  13
0018:  MOVF   0D,W
0019:  MOVWF  14
001A:  MOVF   0E,W
001B:  MOVWF  15
001C:  MOVF   0F,W
001D:  MOVWF  16
001E:  BCF    03.5
001F:  BTFSS  0B.5
0020:  GOTO   023
0021:  BTFSC  0B.2
0022:  GOTO   049
0023:  MOVF   12,W
0024:  MOVWF  04
0025:  MOVF   13,W
0026:  MOVWF  0C
0027:  MOVF   14,W
0028:  MOVWF  0D
0029:  MOVF   15,W
002A:  MOVWF  0E
002B:  MOVF   16,W
002C:  MOVWF  0F
002D:  MOVF   17,W
002E:  MOVWF  0A
002F:  SWAPF  11,W
0030:  MOVWF  03
0031:  BCF    03.5
0032:  SWAPF  10,W
0033:  BTFSC  11.1
0034:  BSF    03.5
0035:  RETFIE
.................... #include <16f84a.h> 
.................... //////////// Standard Header file for the PIC16F84A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F84A 
....................  
.................... #list 
....................  
.................... #fuses HS,PUT,NOWDT,NOPROTECT 
.................... #use delay(clock=20000000) 
0036:  MOVLW  2F
0037:  MOVWF  04
0038:  MOVF   00,W
0039:  BTFSC  03.2
003A:  GOTO   048
003B:  MOVLW  06
003C:  MOVWF  0D
003D:  CLRF   0C
003E:  DECFSZ 0C,F
003F:  GOTO   03E
0040:  DECFSZ 0D,F
0041:  GOTO   03D
0042:  MOVLW  7B
0043:  MOVWF  0C
0044:  DECFSZ 0C,F
0045:  GOTO   044
0046:  DECFSZ 00,F
0047:  GOTO   03B
0048:  RETURN
.................... #use fast_io(a) 
.................... #use fast_io(b) 
....................  
.................... //#define backmode 
.................... #define U3IN1 0 
.................... #define U3IN2 1 
.................... #define U2IN2 2 
.................... #define U2IN1 3 
....................  
.................... //PA感覚で何を書けばいいか書くとよいでしょう。 
.................... #define LS_Right 0 
.................... #define LS_Center 1 
.................... #define LS_Left 2 
....................  
.................... //PBに代入する値です。Vとついてるのはその場回転。 
.................... #ifndef backmode 
.................... #define FORWARD 0b0110	 
.................... #define BACK	0b1001 
.................... #define R_TURN  0b0010 
.................... #define R_TURNV 0b1010 
.................... #define L_TURN  0b0100 
.................... #define L_TURNV 0b0101 
.................... #define STOP 	0b0000 
.................... #define BRAKE	0b1111 
.................... #endif 
....................  
.................... #define PWM_MAX 254 
.................... #define ever (;;) 
....................  
.................... //宣言集 
.................... int SWPwm[4]={0,0,0,0};		//unused 
*
0069:  CLRF   19
006A:  CLRF   1A
006B:  CLRF   1B
006C:  CLRF   1C
....................  
.................... void setup(); 
.................... void TmWait();				//カウンタがフルになるまで待つ 
.................... void mode_judge();			//割り込みようモード判定 
.................... void teiki(); 
.................... unsigned int PWM_COUNT=PWM_MAX; 
.................... unsigned int state[3],old_state[3];	//stateはメイン状態/その時間/その他の状態 
.................... int pin[3],old_pin[3];		// 
.................... int i,j,k;					//counterを回す用 
....................  
.................... #int_TIMER0 
.................... void TIMER0_isr(){ 
.................... 	if(interrupt_active(INT_TIMER0)){ 
*
0049:  BTFSC  0B.2
.................... 		PWM_COUNT--; 
004A:  DECF   1D,F
.................... 	} 
.................... 	clear_interrupt(INT_TIMER0); 
004B:  BCF    0B.2
.................... 	k++; 
004C:  INCF   2C,F
.................... 	delay_ms(100); 
004D:  MOVLW  64
004E:  MOVWF  2F
004F:  CALL   036
0050:  BCF    0B.2
0051:  BCF    0A.3
0052:  GOTO   023
.................... } 
....................  
.................... /* 
.................... interrupt warikomi(){ 
.................... 	if(T0IF){ 
.................... 		PWM_COUNT--; 
.................... 	} 
.................... 	if(RBIF){ 
.................... 		mode_judge(); 
.................... 		RBIF=0; 
.................... 	} 
.................... 	//if while mode judging ,T0 if full. 
.................... 	T0IF = 0; 
.................... } 
....................   */ 
....................  
....................  
.................... void main(){ 
*
0064:  MOVF   03,W
0065:  ANDLW  1F
0066:  MOVWF  03
0067:  MOVLW  FE
0068:  MOVWF  1D
.................... 	setup(); 
*
006D:  GOTO   053
.................... 	while(1){ 
.................... 		for(i=0;i<3;i++){ 
006E:  CLRF   2A
006F:  MOVF   2A,W
0070:  SUBLW  02
0071:  BTFSS  03.0
0072:  GOTO   095
.................... 			old_pin[i]=pin[i]; 
0073:  MOVLW  27
0074:  ADDWF  2A,W
0075:  MOVWF  2D
0076:  MOVLW  24
0077:  ADDWF  2A,W
0078:  MOVWF  04
0079:  MOVF   00,W
007A:  MOVWF  2E
007B:  MOVF   2D,W
007C:  MOVWF  04
007D:  MOVF   2E,W
007E:  MOVWF  00
.................... 			pin[i]=input_b() & (1<<(7-i)); 
007F:  MOVLW  24
0080:  ADDWF  2A,W
0081:  MOVWF  04
0082:  MOVF   06,W
0083:  MOVWF  2E
0084:  MOVF   2A,W
0085:  SUBLW  07
0086:  MOVWF  0D
0087:  MOVLW  01
0088:  MOVWF  0C
0089:  MOVF   0D,F
008A:  BTFSC  03.2
008B:  GOTO   090
008C:  BCF    03.0
008D:  RLF    0C,F
008E:  DECFSZ 0D,F
008F:  GOTO   08C
0090:  MOVF   0C,W
0091:  ANDWF  2E,W
0092:  MOVWF  00
0093:  INCF   2A,F
0094:  GOTO   06F
.................... 			} 
....................  
.................... 		if(pin[1]==0){output_a(FORWARD);} 
0095:  MOVF   25,F
0096:  BTFSS  03.2
0097:  GOTO   09B
0098:  MOVLW  06
0099:  MOVWF  05
009A:  GOTO   0DA
.................... 		else if(pin[0]==0){output_a(R_TURNV);delay_ms(8);j=1;} 
009B:  MOVF   24,F
009C:  BTFSS  03.2
009D:  GOTO   0AC
009E:  MOVLW  0A
009F:  MOVWF  05
00A0:  CLRF   18
00A1:  BTFSC  0B.7
00A2:  BSF    18.7
00A3:  BCF    0B.7
00A4:  MOVLW  08
00A5:  MOVWF  2F
00A6:  CALL   036
00A7:  BTFSC  18.7
00A8:  BSF    0B.7
00A9:  MOVLW  01
00AA:  MOVWF  2B
00AB:  GOTO   0DA
.................... 		else if(pin[2]==0){output_a(L_TURNV);delay_ms(8);j=1;} 
00AC:  MOVF   26,F
00AD:  BTFSS  03.2
00AE:  GOTO   0BD
00AF:  MOVLW  05
00B0:  MOVWF  05
00B1:  CLRF   18
00B2:  BTFSC  0B.7
00B3:  BSF    18.7
00B4:  BCF    0B.7
00B5:  MOVLW  08
00B6:  MOVWF  2F
00B7:  CALL   036
00B8:  BTFSC  18.7
00B9:  BSF    0B.7
00BA:  MOVLW  01
00BB:  MOVWF  2B
00BC:  GOTO   0DA
.................... 		else {	j++; 
00BD:  INCF   2B,F
.................... 				output_a(BACK); 
00BE:  MOVLW  09
00BF:  MOVWF  05
00C0:  CLRF   18
00C1:  BTFSC  0B.7
00C2:  BSF    18.7
00C3:  BCF    0B.7
.................... 				delay_ms(3); 
00C4:  MOVLW  03
00C5:  MOVWF  2F
00C6:  CALL   036
00C7:  BTFSC  18.7
00C8:  BSF    0B.7
.................... 				output_a(STOP); 
00C9:  CLRF   05
.................... 				delay_us(100); 
00CA:  MOVLW  A6
00CB:  MOVWF  0C
00CC:  DECFSZ 0C,F
00CD:  GOTO   0CC
00CE:  NOP
.................... 				output_a(R_TURN); 
00CF:  MOVLW  02
00D0:  MOVWF  05
00D1:  CLRF   18
00D2:  BTFSC  0B.7
00D3:  BSF    18.7
00D4:  BCF    0B.7
.................... 				delay_ms(1);} 
00D5:  MOVLW  01
00D6:  MOVWF  2F
00D7:  CALL   036
00D8:  BTFSC  18.7
00D9:  BSF    0B.7
00DA:  CLRF   18
00DB:  BTFSC  0B.7
00DC:  BSF    18.7
00DD:  BCF    0B.7
.................... 		//if(j==20){output_a(BACK);delay_ms(50);j=1;} 
.................... 		delay_ms(1); 
00DE:  MOVLW  01
00DF:  MOVWF  2F
00E0:  CALL   036
00E1:  BTFSC  18.7
00E2:  BSF    0B.7
.................... 		output_a(STOP); 
00E3:  CLRF   05
.................... 		delay_us(100); 
00E4:  MOVLW  A6
00E5:  MOVWF  0C
00E6:  DECFSZ 0C,F
00E7:  GOTO   0E6
00E8:  NOP
.................... 		if(k==200) { 
00E9:  MOVF   2C,W
00EA:  SUBLW  C8
00EB:  BTFSS  03.2
00EC:  GOTO   0F8
.................... 			output_a(BRAKE); 
00ED:  MOVLW  0F
00EE:  MOVWF  05
00EF:  CLRF   18
00F0:  BTFSC  0B.7
00F1:  BSF    18.7
00F2:  BCF    0B.7
.................... 			delay_ms(100); 
00F3:  MOVLW  64
00F4:  MOVWF  2F
00F5:  CALL   036
00F6:  BTFSC  18.7
00F7:  BSF    0B.7
.................... 		} 
00F8:  GOTO   06E
.................... 	} 
.................... 	while(1){ 
.................... 		output_a(R_TURN); 
00F9:  MOVLW  02
00FA:  MOVWF  05
00FB:  CLRF   18
00FC:  BTFSC  0B.7
00FD:  BSF    18.7
00FE:  BCF    0B.7
.................... 		delay_ms(1);} 
00FF:  MOVLW  01
0100:  MOVWF  2F
0101:  CALL   036
0102:  BTFSC  18.7
0103:  BSF    0B.7
0104:  GOTO   0F9
.................... } 
.................... /* 
0105:  SLEEP
.................... 	state[0]=FORWARD; 
.................... 	state[1]=200; 
.................... 	state[2]=L_TURN; 
.................... 	for (;;) { 
.................... 		for (PWM_COUNT=PWM_MAX;PWM_COUNT<1;PWM_COUNT--){ 
.................... 			if(state[1]>PWM_COUNT) 	output_a(state[0]); 
.................... 			else 					output_a(state[2]); 
.................... 			delay_ms(100); 
.................... 		} 
.................... 	} 
.................... */ 
....................  
....................  
.................... void setup(){ 
.................... 	//OPTION=0b00000010; 
.................... 	/* 0 PBPU プルアップを使用する。 
.................... 	 * 0 INTEDG 立下りエッジを検出し割り込む 
.................... 	 * 0 TMR0clocksource 内部クロック 
.................... 	 * 0 TMR0のインクリメントタイミング 
.................... 	 * 0 ぷりすけーらーをTMR0に使う。 
.................... 	 * 010 0.8192ms 1/8 
.................... 	   001 0.4096ms 1/16 
.................... 	 */ 
.................... 	setup_timer_0(RTCC_INTERNAL|RTCC_DIV_256); 
*
0053:  BSF    03.5
0054:  MOVF   01,W
0055:  ANDLW  C0
0056:  IORLW  07
0057:  MOVWF  01
.................... 	 	 
.................... 	 //INTCON=0b10101000; 
.................... 	/* 1 GIE 
.................... 	 * 0 EE  INT EN 
.................... 	 * 1 TM0 INT EN 
.................... 	 * 0 INT INT EN 
.................... 	 * 1 RB  INT EN 
.................... 	 * 0 TM0 INT FLAG 
.................... 	 * 0 INT INT FLAG 
.................... 	 * 0 RB  INT FLAG 
.................... 	 */ 
.................... 	 	 
.................... 	 set_tris_A(0b00010000); 
0058:  MOVLW  10
0059:  MOVWF  05
.................... 	 //TRISA=0b00010000; 
.................... 	/* 0 予約 
.................... 	 * 0 予約 
.................... 	 * 0 予約 
.................... 	 * 1  
.................... 	 * 0 17 U3 IN1 
.................... 	 * 0 18 U3 IN2 
.................... 	 * 0 02 U2 IN2 
.................... 	 * 0 01 U2 IN1 
.................... 	 */ 
.................... 	 //PORTA=0; 
.................... 	 output_a(0); 
005A:  BCF    03.5
005B:  CLRF   05
....................  
.................... 	 set_tris_B(0b11111111); 
005C:  MOVLW  FF
005D:  BSF    03.5
005E:  MOVWF  06
.................... 	 //TRISB=0b11111111; 
.................... 	/* 1 13 ラインセンサ 
.................... 	 * 1 12 ラインセンサ 
.................... 	 * 1 11 ラインセンサ 
.................... 	 * 1  
.................... 	 * 1  
.................... 	 * 1  
.................... 	 * 1  
.................... 	 * 1  
.................... 	 */ 
.................... 	 //PORTB=0; 
.................... 	output_b(0); 
005F:  BCF    03.5
0060:  CLRF   06
.................... 	 
.................... 	enable_interrupts(INT_TIMER0); 
0061:  BSF    0B.5
.................... 	enable_interrupts(GLOBAL); 
0062:  BSF    0B.7
0063:  GOTO   06E (RETURN)
....................  
....................  
....................  
....................  
....................  
.................... /*temp aaa 
.................... 	 CLRWDT(); 
.................... 	 TMR0=0; 
.................... 	 T0IE=0; 
.................... 	 T0IF=0; 
....................  
.................... } 
.................... 	 
.................... void TmWait(void){ 
.................... 	while(!T0IF); 
.................... 	T0IF = 0; 
.................... } 
.................... aaa temp*/ 
.................... } 
....................  
.................... void mode_judge(void){ 
.................... 	//escape and reading 
.................... 	for(i=0;i<3;i++){ 
.................... 		old_pin[i]=pin[i]; 
.................... 		pin[i]=input_b() & (1<<i); 
.................... 		//pin[i]=PORTB & (1<<i); 
.................... 		old_state[i]=state[i]; 
.................... 	} 
.................... 	 
.................... 	//mode judge 
.................... 	if(!pin[LS_Center]){ 
.................... 		state[0] = FORWARD; 
.................... 		state[2] = STOP; 
.................... 		if(pin[LS_Left]==pin[LS_Right]){ 
.................... 			// b b b or w b w 
.................... 			state[1]=PWM_MAX+1; 
.................... 		} 
.................... 		else{ 
.................... 			if(!pin[LS_Left]){ 
.................... 				//b b w 
.................... 				state[0]=L_TURN; 
.................... 			} 
.................... 			else{ 
.................... 				//w b b 
.................... 				state[0]=R_TURN; 
.................... 			} 
.................... 			state[1]=PWM_MAX/2; 
.................... 			state[2]=FORWARD; 
.................... 		} 
.................... 	} 
.................... 	else if(!pin[LS_Left]){ 
.................... 		if(old_state[0]==L_TURN){ 
.................... 			state[0]=L_TURNV; 
.................... 		} 
.................... 		else{ 
.................... 			state[0]=L_TURN; 
.................... 		} 
.................... 		state[1]=PWM_MAX/2; 
.................... 		state[2]=STOP; 
.................... 	} 
.................... 	else if(!pin[LS_Right]){ 
.................... 		if(old_state[0]==R_TURN){ 
.................... 			state[0]=R_TURNV; 
.................... 		} 
.................... 		else{ 
.................... 			state[0]=R_TURN; 
.................... 		} 
.................... 		state[1]=PWM_MAX/2; 
.................... 		state[2]=STOP; 
.................... 	} 
.................... 	else{ 
.................... 		state[0]=FORWARD; 
.................... 		state[1]=PWM_MAX-1; 
.................... 		state[2]=STOP; 
.................... 	} 
.................... } 
....................  
.................... void teiki(void){ 
.................... 	//escape and reading 
.................... 	for(i=0;i<3;i++){ 
.................... 		old_pin[i]=pin[i]; 
.................... 		pin[i]=input_b() & (1<<i); 
.................... 		//pin[i]=PORTB() & (1<<i); 
.................... 		old_state[i]=state[i]; 
.................... 	} 
.................... 	 
.................... 	//mode judge 
.................... 	if(!pin[LS_Center]){ 
.................... 		state[0] = FORWARD; 
.................... 		state[2] = STOP; 
.................... 		if(pin[LS_Left]==pin[LS_Right]){ 
.................... 			// b b b or w b w 
.................... 			state[1]=PWM_MAX+1; 
.................... 		} 
.................... 		else{ 
.................... 			if(!pin[LS_Left]){ 
.................... 				//b b w 
.................... 				state[0]=L_TURN; 
.................... 			} 
.................... 			else{ 
.................... 				//w b b 
.................... 				state[0]=R_TURN; 
.................... 			} 
.................... 			state[1]=PWM_MAX/2; 
.................... 			state[2]=FORWARD; 
.................... 		} 
.................... 	} 
.................... 	else if(!pin[LS_Left]){ 
.................... 		if(old_state[0]==L_TURN){ 
.................... 			state[0]=L_TURNV; 
.................... 		} 
.................... 		else{ 
.................... 			state[0]=L_TURN; 
.................... 		} 
.................... 		state[1]=PWM_MAX/2; 
.................... 		state[2]=STOP; 
.................... 	} 
.................... 	else if(!pin[LS_Right]){ 
.................... 		if(old_state[0]==R_TURN){ 
.................... 			state[0]=R_TURNV; 
.................... 		} 
.................... 		else{ 
.................... 			state[0]=R_TURN; 
.................... 		} 
.................... 		state[1]=PWM_MAX/2; 
.................... 		state[2]=STOP; 
.................... 	} 
.................... 	else{ 
.................... 		state[0]=FORWARD; 
.................... 		state[1]=PWM_MAX-1; 
.................... 		state[2]=STOP; 
.................... 	} 
.................... } 

Configuration Fuses:
   Word  1: 3FF2   HS NOWDT PUT NOPROTECT
